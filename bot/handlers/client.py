import json
from datetime import datetime

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
from aiogram.utils.markdown import hbold

from bot.aiogram_calendar.schemas import SimpleCalendarCallback
from bot.aiogram_calendar.simple_calendar import SimpleCalendar
from bot.config import calendar_dates_range, admin_id, bot
from bot.constants import denotation_client_days
from bot.keyboards.admin import approve_appointment_keyboard
from bot.keyboards.client import get_time_slot_buttons, get_confirm_choice_buttons, ask_user_phone
from bot.services.appointments import add_appointment, get_appointment
from bot.services.calendar_days import get_days_off, get_available_days
from bot.services.custom_days import get_unavailable_days
from bot.services.users import get_user_have_active_appointment, get_bar_user_phone_number, update_bar_user_by_user_id
from db.db_session import redis

client_router = Router()


@client_router.message(Command("help"))
async def command_help(message: Message) -> None:
    await message.answer(f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {hbold(message.from_user.full_name)}!{denotation_client_days}")


@client_router.message(Command("start"))
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """

    user_have_active_appointment = await get_user_have_active_appointment(message.from_user.id)
    if user_have_active_appointment:
        await message.answer(
            f"üéâ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã, –∂–¥–µ–º –í–∞—Å! \n–î–∞—Ç–∞: {user_have_active_appointment[0].strftime('%d %B %Y')}"
            f"\n–í—Ä–µ–º—è: {user_have_active_appointment[1].strftime('%H:%M')} !\n"
            f"üìç –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è 2 —Ä–∞–∑–∞",
            resize_keyboard=True,
        )
    else:
        await message.answer(
            f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {hbold(message.from_user.full_name)}! \n"
            f"üóì –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏!{denotation_client_days}",
            reply_markup=await SimpleCalendar().start_calendar(flag="user"),
        )


@client_router.callback_query(SimpleCalendarCallback.filter(F.flag == "user"))
async def get_day_simple_calendar(callback_query: CallbackQuery, callback_data: SimpleCalendarCallback):
    unavailable_days = await get_unavailable_days()
    days_off = get_days_off()
    available_days = get_available_days()

    calendar = SimpleCalendar(show_alerts=True)
    calendar.set_dates_range(*calendar_dates_range)
    is_selected, selected_date, flag = await calendar.process_selection(callback_query, callback_data, "user")

    if is_selected:
        selected_date_str = selected_date.strftime("%d %B %Y")
        await redis.set(callback_query.message.chat.id, json.dumps({"on_date": selected_date_str}))

        if selected_date.date() < datetime.now().date():
            await answer_wrong_date(
                callback_query,
                selected_date_str,
                "–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É",
            )
        elif selected_date.date() in days_off:
            await answer_wrong_date(
                callback_query,
                selected_date_str,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π",
            )
        elif selected_date.date() in unavailable_days:
            await answer_wrong_date(
                callback_query,
                selected_date_str,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–ø–∏—Å—å —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞",
            )
        elif selected_date.date() not in available_days:
            await answer_wrong_date(
                callback_query,
                selected_date_str,
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∞–ª–µ–∫–æ–µ –±—É–¥—É—â–µ–µ –Ω–µ –¥–µ–ª–∞–µ–º",
            )
        else:
            keyboard = await get_time_slot_buttons(selected_date)
            await callback_query.message.edit_text(
                "üïõ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è",
                reply_markup=keyboard,
                resize_keyboard=True,
            )


async def answer_wrong_date(callback_query: CallbackQuery, selected_date_str: str, answer: str):
    await callback_query.message.answer(
        f"‚õî –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date_str}\n{answer}, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä",
        reply_markup=await SimpleCalendar().start_calendar(),
    )


@client_router.callback_query(lambda query: query.data.startswith("time_"))
async def get_time(callback_query: CallbackQuery):
    selected_time_str = callback_query.data.split("_")[1]
    appointment_cache = json.loads(await redis.get(callback_query.message.chat.id))
    appointment_cache["on_time"] = selected_time_str
    await redis.set(callback_query.message.chat.id, json.dumps(appointment_cache))
    keyboard = await get_confirm_choice_buttons()
    await callback_query.message.edit_text(
        f"üëç –û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞\n üóì –î–∞—Ç–∞:"
        f" {appointment_cache['on_date']}\n "
        f"‚åö –í—Ä–µ–º—è: {appointment_cache['on_time']}",
        reply_markup=keyboard,
        resize_keyboard=True,
    )


@client_router.callback_query(lambda query: query.data.startswith("conf_"))
async def get_confirm(callback_query: CallbackQuery):
    confirm = callback_query.data.split("_")[1]
    if confirm.lower() == "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        bar_user_id, appointment_id = await add_appointment(callback_query.message)
        appointment_cache = json.loads(await redis.get(callback_query.message.chat.id))
        await callback_query.message.edit_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ, –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞\n–î–∞—Ç—É: {appointment_cache['on_date']}\n"
            f"–í—Ä–µ–º—è: {appointment_cache['on_time']}!\n"
            f"–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            resize_keyboard=True,
        )
        appointment = await get_appointment(appointment_id)
        appointment_keyboard = await approve_appointment_keyboard(callback_query.message.chat.id)
        await redis.set(admin_id, json.dumps({callback_query.message.chat.id: {"confirm_appointment": appointment_id}}))
        await bot.send_message(
            admin_id,
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å—å\n{appointment.name} –∑–∞–ø–∏—Å–∞–ª—Å—è –Ω–∞\n"
            f"–î–∞—Ç—É: {appointment.date} - –í—Ä–µ–º—è: {appointment.time}!\n",
            reply_markup=appointment_keyboard,
        )

        user_phone_number = await get_bar_user_phone_number(bar_user_id)
        if not user_phone_number:
            markup = await ask_user_phone()
            await callback_query.message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
                resize_keyboard=True,
                reply_markup=markup,
            )
    else:
        await callback_query.message.edit_text("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!")
    await redis.delete(callback_query.message.chat.id)


@client_router.message(F.contact)
async def func_contact(message: Message):
    updated_user_params = {"phone": message.contact.phone_number}
    await update_bar_user_by_user_id(message.chat.id, **updated_user_params)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        resize_keyboard=True,
        reply_markup=ReplyKeyboardRemove(),
    )
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)
