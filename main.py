import asyncio
import os
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.filters.callback_data import CallbackData
from aiogram.types import (CallbackQuery, InlineKeyboardButton,
                           InlineKeyboardMarkup, KeyboardButton, Message,
                           ReplyKeyboardMarkup, ReplyKeyboardRemove)
from aiogram.utils.markdown import hbold

from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback
from constants import some_redis
from models import Appointment, BarUser
from services.database_queries import (create_appointment,
                                       create_or_get_bar_user, find_free_slots,
                                       get_active_appointments,
                                       get_available_days,
                                       get_bar_user_phone_number, get_days_off,
                                       get_time_slot_id, get_unavailable_days,
                                       get_user_have_active_appointment,
                                       update_bar_user)

bot = Bot(token=os.getenv("BBOT_TOKEN", ""), parse_mode="HTML")
# Bot
dp = Dispatcher()


@dp.message(Command("admin"))
async def command_admin(message: Message) -> None:
    # look all
    active_appointments_by_dates = await get_active_appointments()
    for day, day_slots in active_appointments_by_dates.items():
        slots = []
        for slot in day_slots:
            slots.append(
                f' {slot["slot_time"].strftime("%H:%M")} üßí {slot["user_name"]} üìû {slot["phone"]}\n'
            )

        await message.answer(f" {hbold(day.strftime('%d %B %Y'))}\n {' '.join(slots)}")

    # add holiday
    # await message.answer(
    #     f"üëã —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
    # )


@dp.message(Command("help"))
async def command_help(message: Message) -> None:
    await message.answer(
        f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {hbold(message.from_user.full_name)}! \n"
        f"üóì –ü—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã –µ—Å—Ç—å —Ç–∞–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏! \n"
        f"[1] - —Å–µ–≥–æ–¥–Ω—è\n"
        f"‚àô2‚àô - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã\n"
        f"‚à∂3‚à∂ - –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
        f"‚Åù4‚Åù - –≤—ã—Ö–æ–¥–Ω—ã–µ\n"
        f" 5 - –æ–±—ã—á–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å—å –Ω–µ –≤–µ–¥–µ—Ç—Å—è",
    )


@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    unavailable_days = await get_unavailable_days()
    some_redis["unavailable_days"] = unavailable_days
    user_have_active_appointment = await get_user_have_active_appointment(
        message.from_user.id
    )
    if user_have_active_appointment:
        await message.answer(
            f"üéâ –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã, –∂–¥–µ–º –í–∞—Å! \n–î–∞—Ç–∞: {user_have_active_appointment[0].strftime('%d %B %Y')}"
            f"\n–í—Ä–µ–º—è: {user_have_active_appointment[1].strftime('%H:%M')} !\n"
            f"üìç –ù–µ–ª—å–∑—è –∑–∞–ø–∏—Å–∞—Ç—å—Å—è 2 —Ä–∞–∑–∞",
            resize_keyboard=True,
        )
    else:
        await message.answer(
            f"üëã –î–æ–±—Ä—ã–π –¥–µ–Ω—å, {hbold(message.from_user.full_name)}! \n"
            f"üóì –í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏! \n"
            f"[1] - —Å–µ–≥–æ–¥–Ω—è\n"
            f"‚àô2‚àô - –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã\n"
            f"‚à∂3‚à∂ - –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n"
            f"‚Åù4‚Åù - –≤—ã—Ö–æ–¥–Ω—ã–µ\n"
            f" 5 - –æ–±—ã—á–Ω—ã–µ –¥–∞—Ç—ã –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–ø–∏—Å—å –Ω–µ –≤–µ–¥–µ—Ç—Å—è",
            reply_markup=await SimpleCalendar().start_calendar(),
        )


@dp.callback_query(SimpleCalendarCallback.filter())
async def get_day_simple_calendar(
    callback_query: CallbackQuery, callback_data: CallbackData
):
    unavailable_days = await get_unavailable_days()
    days_off = get_days_off()
    available_days = get_available_days()
    calendar = SimpleCalendar(show_alerts=True)
    calendar.set_dates_range(datetime(2022, 1, 1), datetime(2025, 12, 31))
    is_selected, selected_date = await calendar.process_selection(
        callback_query, callback_data
    )

    if is_selected:
        selected_date_str = selected_date.strftime("%d %B %Y")
        some_redis[callback_query.message.chat.username] = {}
        some_redis[callback_query.message.chat.username]["on_date"] = selected_date_str
        if selected_date.date() < datetime.now().date():
            await callback_query.message.answer(
                f"‚õî –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date_str}\n–ù–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä",
                reply_markup=await SimpleCalendar().start_calendar(),
            )
        elif selected_date.date() in days_off:
            await callback_query.message.answer(
                f"‚õî –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date.strftime('%d %B %Y')}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —ç—Ç–æ –≤—ã—Ö–æ–¥–Ω–æ–π, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä",
                reply_markup=await SimpleCalendar().start_calendar(),
            )
        elif selected_date.date() in unavailable_days:
            await callback_query.message.answer(
                f"‚õî –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date.strftime('%d %B %Y')}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å –∑–∞–ø–∏—Å—å —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä",
                reply_markup=await SimpleCalendar().start_calendar(),
            )
        elif selected_date.date() not in available_days:
            await callback_query.message.answer(
                f"‚õî –í—ã –≤—ã–±—Ä–∞–ª–∏ {selected_date.strftime('%d %B %Y')}\n–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∑–∞–ø–∏—Å—å –Ω–∞ –¥–∞–ª–µ–∫–æ–µ –±—É–¥—É—â–µ–µ –Ω–µ –¥–µ–ª–∞–µ–º, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤—ã–±–æ—Ä",
                reply_markup=await SimpleCalendar().start_calendar(),
            )
        else:
            buttons = []
            slots = await find_free_slots(selected_date.date())
            if len(slots) > 4:
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{index}", callback_data=f"time_{index}"
                        )
                        for index in slots[:4]
                    ]
                )
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{index}", callback_data=f"time_{index}"
                        )
                        for index in slots[4:]
                    ]
                )
            else:
                buttons.append(
                    [
                        InlineKeyboardButton(
                            text=f"{index}", callback_data=f"time_{index}"
                        )
                        for index in slots
                    ]
                )
            keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, hide=True)
            await callback_query.message.edit_text(
                "üïõ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ–µ –≤—Ä–µ–º—è",
                reply_markup=keyboard,
                resize_keyboard=True,
            )


@dp.callback_query(lambda query: query.data.startswith("time_"))
async def get_time(callback_query: CallbackQuery):
    selected_time_str = callback_query.data.split("_")[1]
    some_redis[callback_query.message.chat.username]["on_time"] = selected_time_str
    buttons = [
        [
            InlineKeyboardButton(text=f"{index}", callback_data=f"conf_{index}")
            for index in ["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons, hide=True)
    await callback_query.message.edit_text(
        f"üëç –û—Ç–ª–∏—á–Ω–æ, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å –Ω–∞\n üóì –î–∞—Ç–∞:"
        f" {some_redis[callback_query.message.chat.username]['on_date']}\n ‚åö –í—Ä–µ–º—è: {some_redis[callback_query.message.chat.username]['on_time']}",
        reply_markup=keyboard,
        resize_keyboard=True,
    )


@dp.callback_query(lambda query: query.data.startswith("conf_"))
async def get_confirm(callback_query: CallbackQuery):
    confirm = callback_query.data.split("_")[1]
    if confirm.lower() == "‚úÖ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        new_user = BarUser(
            user_id=callback_query.message.chat.id,
            username=callback_query.message.chat.username,
            name=callback_query.message.chat.first_name,
            phone="",
            is_active=True,
        )
        time_slot_id = await get_time_slot_id(
            some_redis[callback_query.message.chat.username]["on_time"]
        )
        bar_user_id = await create_or_get_bar_user(new_user)
        new_appointment = Appointment(
            date=datetime.strptime(
                some_redis[callback_query.message.chat.username]["on_date"], "%d %B %Y"
            ).date(),
            time_slot_id=time_slot_id,
            bar_user_id=bar_user_id,
        )
        await create_appointment(new_appointment)

        await callback_query.message.edit_text(
            f"üéâ –û—Ç–ª–∏—á–Ω–æ, –í—ã –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞\n–î–∞—Ç—É: {some_redis[callback_query.message.chat.username]['on_date']}\n"
            f"–í—Ä–µ–º—è: {some_redis[callback_query.message.chat.username]['on_time']}!\n"
            f"–í –¥–µ–Ω—å —Å—Ç—Ä–∏–∂–∫–∏ ü§ñ - –ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n\n",
            resize_keyboard=True,
        )
        user_phone_number = await get_bar_user_phone_number(bar_user_id)
        if not user_phone_number:
            markup = ReplyKeyboardMarkup(
                resize_keyboard=True,
                keyboard=[
                    [
                        KeyboardButton(
                            text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True
                        )
                    ]
                ],
                one_time_keyboard=True,
            )
            await callback_query.message.answer(
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è",
                resize_keyboard=True,
                reply_markup=markup,
            )
    else:
        await callback_query.message.edit_text(
            "–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–ø–∏—Å—å!",
        )

    del some_redis[callback_query.message.chat.username]


@dp.message(F.contact)
async def func_contact(message: Message):
    updated_user_params = {"phone": message.contact.phone_number}
    await update_bar_user(message.chat.id, **updated_user_params)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ, –í–∞—à –Ω–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω!",
        resize_keyboard=True,
        reply_markup=ReplyKeyboardRemove(),
    )
    await bot.delete_message(chat_id=message.chat.id, message_id=message.message_id)


async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
